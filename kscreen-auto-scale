#!/usr/bin/python3
import json
import subprocess
import logging
import sys
from argparse import ArgumentParser
from typing import TypedDict
from pathlib import Path


logger = logging.getLogger(__name__)
logger.setLevel(logging.DEBUG)
formatter = logging.Formatter('%(asctime)s %(levelname)s: %(message)s')
file_handler = logging.FileHandler(Path(__file__).parent / "log.txt")
file_handler.setFormatter(formatter)
stream_handler = logging.StreamHandler(sys.stdout)
stream_handler.setFormatter(formatter)
logger.addHandler(file_handler)
logger.addHandler(stream_handler)


class Size(TypedDict):
    height: int
    width: int


class Position(TypedDict):
    x: int
    y: int


class Mode(TypedDict):
    id: str
    name: str
    refreshRate: int
    size: Size


class Output(TypedDict):
    connected: bool
    currentModeId: str
    enabled: bool
    followPreferredMode: bool
    icon: str
    id: int
    modes: list[Mode]
    name: str
    pos: Position
    preferredModes: list[str]
    priority: int
    replicationSource: int
    rgbRange: int
    rotation: int
    scale: float
    size: Size
    sizeMM: Size


def display_config() -> list[Output]:
    stdout = subprocess.check_output(
        ["kscreen-doctor", "--json"], encoding="utf-8")
    return json.loads(stdout)["outputs"]


def is_16x9(size: Size):
    return size["width"] * 9 == size["height"] * 16


def set_output_scale(config: Output, preferred_width: int, force_16x9: bool = False):
    logger.info(
        "Checking monitor %s: %sx%s, scale %sx",
        config["name"], config["size"]["width"], config["size"]["height"],
        config["scale"]
    )
    preferred_mode = next(
        mode for mode in config["modes"]
        if (
            (force_16x9 and is_16x9(mode["size"])) or
            (not force_16x9 and mode["id"] in config["preferredModes"])
        )
    )

    recommended_scale = round(preferred_mode["size"]["width"] / preferred_width, 2)
    if not 0.9 < config["scale"] / recommended_scale < 1.1:
        logger.info("suggest %s -> %s",
                    config["scale"], recommended_scale)
        stdout = subprocess.check_output([
            "kscreen-doctor",
            f"output.{config['name']}.mode.{preferred_mode['name']}",
            f"output.{config['name']}.scale.{recommended_scale}"
        ], encoding="utf-8", stderr=subprocess.STDOUT)
        logger.info("KScreen: %s", stdout)
    else:
        logger.info("%s no need to change", config["name"])


def main(preferred_width: int):
    configs = display_config()
    if len(configs) == 1:
        logger.info("Resetting monitors")
        config = configs[0]
        set_output_scale(config, preferred_width)
    else:
        force_16x9 = all(
            config["pos"]["x"] == config["pos"]["y"] == 0
            for config in configs
        )  # Unify output, force 16:9
        logger.info("Force 16:9: %s", force_16x9)
        for config in configs:
            set_output_scale(config, preferred_width, force_16x9=force_16x9)


if __name__ == "__main__":
    parser = ArgumentParser(description="Your script description here.")
    parser.add_argument(
        "--preferred-width",
        type=float,
        default=1536,
        help="Specify the preferred width as a floating-point number."
    )
    args = parser.parse_args()
    main(args.preferred_width)
